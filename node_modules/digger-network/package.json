{
  "name": "digger-network",
  "version": "0.0.1",
  "description": "The contract / request and reply modules for digger",
  "main": "src/index.js",
  "scripts": {
    "test": "make test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/binocarlos/digger-network.git"
  },
  "keywords": [
    "digger",
    "network"
  ],
  "author": {
    "name": "Kai Davenport"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "gitHead": "6990a24fb5d3e9682469b71f810ea72ba4f7facc",
  "bugs": {
    "url": "https://github.com/binocarlos/digger-network/issues"
  },
  "devDependencies": {
    "mocha": "~1.12.0",
    "should": "~1.2.2",
    "digger-container": "0.0.10",
    "digger-client": "0.0.2"
  },
  "dependencies": {
    "lodash": "~1.3.1",
    "q": "~0.9.6",
    "digger-utils": "~1.0.1",
    "async": "~0.2.9"
  },
  "readme": "digger-network\n==============\n\nThe contract / request and reply modules for digger\n\n\n## Request\n\nA simple object that represents a HTTP request in JSON\n\n```js\nvar network = require('digger-network');\n\nvar req = network.request({\n\tmethod:'get',\n\turl:'/some/url'\n})\n\nreq.setHeader('x-some-thing', '3434');\n\n```\n\n## Response\n\nAn object representing a HTTP response - you can pass a function to be called when it has replied\n\n```js\nvar network = require('digger-network');\n\nvar res = network.response(function(){\n\tconsole.log('statuscode: ' + res.statusCode);\t\n\tconsole.log('body: ' + res.body);\n})\n```\n\nOr you can construct a response from raw JSON\n\n```js\n\nvar network = require('digger-network');\n\nvar res = network.response({\n\tstatusCode:200,\n\theaders:{\n\t\t'content-type':'text/plain'\n\t},\n\tbody:'hello digger'\n}\n\n```\n\n## Contract\n\nA contract is an array of requests to be run as a batch either in series (a pipe contract) or in parallel (a merge contract).\n\nContracts are produced by running queries on digger containers - they are handled by the [digger-contracts](https://github.com/binocarlos/digger-contracts) module\n\nA contract representing posting data to 2 different places\n\n```js\nvar network = require('digger-network');\n\nvar contract = network.contract({\n\tmethod:'post',\n\turl:'/reception',\n\theaders:{\n\t\t'content-type':'digger/contract',\n\t\t'x-contract-type':'merge'\n\t},\n\tbody:[{\n\t\tmethod:'post',\n\t\turl:'/some/database/path',\n\t\tbody:'hello database 1'\n\t},{\n\t\tmethod:'post',\n\t\turl:'/some/other/path',\n\t\tbody:'hello database 2'\n\t}]\n}\n})\n\n```\n\n## Licence\n\nMIT",
  "_id": "digger-network@0.0.1",
  "_from": "digger-network"
}
