{
  "name": "digger-container",
  "version": "0.0.14",
  "description": "A JQuery style array wrapper for JSON models",
  "main": "src/index.js",
  "scripts": {
    "test": "make test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/binocarlos/digger-container.git"
  },
  "keywords": [
    "digger",
    "container"
  ],
  "author": {
    "name": "Kai Davenport"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "gitHead": "a112cb122e36249012af51c5d115bc3f4ad7ac8f",
  "bugs": {
    "url": "https://github.com/binocarlos/digger-container/issues"
  },
  "devDependencies": {
    "mocha": "~1.12.0",
    "should": "~1.2.2"
  },
  "dependencies": {
    "dotty": "~0.0.2",
    "digger-utils": "~1.0.3"
  },
  "readme": "# digger-container\n\nA JQuery style array wrapper for JSON models\n\n# install\n\n## node.js\n\n\t$ npm install digger-container\n\n## browser\n\nYou can use [browserify](https://github.com/substack/node-browserify) and use digger-container in the browser too!\n\n# overview\n\nThis library provides an api very similar to JQuery but for messing with JSON models not DOM elements.\n\nIt can be used a stand-alone data tool or as part of a greater [digger.io](https://github.com/binocarlos/digger.io) network.\n\n## data structure\nAll containers have a 'models' property.\n\nThis is an array of raw JSON objects that is the actual data the container represents.\n\nEach model has a '_digger' property assigned to it.\n\nThis object contains the meta data about the model (tagname, classnames etc).\n\nAn example of a model:\n\n```js\n{\n\tname:'Ladder',\n\theight:354,\n\t_digger:{\n\t\ttag:'product',\n\t\tclass:['tall', 'narrow']\n\t},\n\t_children:[]\n}\n```\n\n## children\nEach model in a container can also have a '_children' property.\n\nThis is an array of model data that lives 'inside' of the parent container.\n\nThis is how the digger tree structure works - by containers living inside of others.\n\n## JQuery style accessors\nA container is always an array of models - this lets you run [digger.io](https://github.com/binocarlos/digger.io) queries and have the container hold the results.\n\nIf you 'get' an attribute - the container will return the value of the first model.\n\nIf you 'set' an attribute - the container will apply the value to all models.\n\nThis is consistent with how JQuery deals with it's underlying array of DOM elements:\n\n# examples\n\n## Creating containers\nCreate a new container with a specific tagname - the tagname is like the table name in a traditional database.\n\n```js\n// this line will be assumed through all the rest of the examples\nvar Container = require('digger-container');\n\nvar product = Container('product');\n```\n\nYou can also pass an attributes object as the second argument:\n\n```js\nvar product = Container('product', {\n\tname:'Blue Suede Shoes',\n\tprice:78\n})\n```\n\nIf you have an array of JSON models already - you can just pass that:\n\n```\nvar data = [{\n\tname:\"Superman\",\n\trating:7.8\n},{\n\tname:\"Spiderman\",\n\trating:7.9\n}]\n\nvar superheroes = Container(data);\n```\n\n## Changing attributes\nOnce you have a container - you can change the attributes of ALL models within it at once - just like JQuery:\n\n```\n// take our superheros container from above\nvar superheroes = Container(data);\n\n// set the tagnames of every model to superhero\nsuperheroes.tag('superhero')\n\n// set a deep attribute for each superhero - this creates an object for 'filming'\nsuperheroes.attr('filming.city', 'Los Angeles');\n```\n\n## Spawning new containers\nWe can also generate new containers from the data inside of existing ones:\n\n```\n// get a container with just superman inside\nvar superman = superheroes.eq(0);\n\nsuperman.attr('loves', 'Louis Lane');\n```\n\n## Accessing models\nYou can get to the raw underlying model also:\n\n```\n// get the data inside the superman model\nvar raw_superman = superheroes.get(0);\n\nconsole.dir(raw_superman)\n\n/*\n\n\t{\n\t\tname:\"Superman\",\n\t\trating:7.8,\n\t\tloves:\"Louis Lane\",\n\t\t_digger:{\n\t\t\ttag:'superhero'\n\t\t}\n\t}\n\t\n*/\n```\n\n# api\n\nthese methods can be called on an instantiated container\n\n### toJSON\nreturns an array of the containers underlying models\n\n### spawn\nreturns a new container based upon the provided models\n\n### clone\nreturns a copy of the current container but with all of the diggerids changed\n\n```js\nvar test = Container('product', {\n  price:100,\n  address:{\n    postcode:'apples'\n  }\n})\n\nvar copy = test.clone();\n\ncopy.attr('price').should.equal(100);\ncopy.diggerid().should.not.equal(test.diggerid());\n```\n### containers\nreturn an array of containers each one holding a single model in the current models array\n\n```js\nvar data = [{\n\tname:\"Superman\",\n\trating:7.8\n},{\n\tname:\"Spiderman\",\n\trating:7.9\n}]\n\nvar superheroes = Container(data);\n\nvar containers = superheroes.containers();\n\n// containers is now an array of 2 containers each with 1 model\n```\n\n### eq(index)\nreturn a container for the model at the given index\n\n### get(index)\nreturn the model at index\n\n### add(models)\nadd some models to the current models array\n\n### each(fn)\nrun a function over this.containers()\n\n### map(fn)\nmap a function over this.containers()\n\n### count()\nreturns the length of the models array\n\n### first()\nreturn a container for the first model\n\n### last\nreturn a container for the last model\n\n\n### children\nreturns a container that is all of the container models children merged into one array\n\n### recurse\nrun a function over a container for each model and all descendents\n\n### descendents\nreturn a container containing a flat model array of every model and it's descendents\n\n### skeleton\nreturn an array of the _digger properties for each model\n\n\n### property getter/setters\nthe following methods allow you to get/set the data for the models:\n\n * attr - top level properties\n * digger - '_digger' properties\n * data - '_digger.data' properties - not saved to database\n * diggerid - property accessor for '_digger.diggerid'\n * diggerparentid - property accessor for '_digger.diggerparentid'\n * diggerwarehouse - property accessor for '_digger.diggerwarehouse'\n * id - property accessor for '_digger.id'\n * tag - property accessor for '_digger.tag'\n * classnames - property accessor for '_digger.classnames'\n\n### removeAttr / removeDigger / removeData\nremove properties from models\n\n### is(tagname)\ntells you if the first model is a tagname\n\n### addClass(classname)\nadds a classname to the models\n\n### removeClass(classname)\nremoved a classname to the models\n\n### hasClass(classname)\ntells you if the first model has the given class\n\n### hasAttr(name)\ntells you if the first model has the given attribute\n\n### isEmpty\nif models.length<=0\n\n### inject_data(data)\nextend the model with the given data\n\n### diggerurl\nreturn this.diggerwarehouse() + '/' + this.diggerid()\n\n### title\nthe name or title property returned\n\n### summary\na pretty string summarizing the model",
  "_id": "digger-container@0.0.14",
  "_from": "digger-container"
}
